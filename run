const http = require('http');
const path = require('path');
const Raldowork = require('./raldowork');

const PORT = 3131;

const CONTENT_TYPES = {
  '.html': 'text/html',
  '.css': 'text/css',
  '.js': 'application/javascript',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpeg',
  '.jpeg': 'image/jpeg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.ico': 'image/x-icon',
  '.txt': 'text/plain',
  '.md': 'text/markdown'
};

function getContentType(filePath) {
  const ext = path.extname(filePath).toLowerCase();
  return CONTENT_TYPES[ext] || 'application/octet-stream';
}

function renderHTML() {
  const projects = Raldowork.list();
  const projectLinks = projects
    .map(project => `
      <li>
        <a href="/${encodeURIComponent(project.rlcd)}/">
          <strong>${project.name}</strong>
          <small>${project.rlcd}</small>
        </a>
      </li>
    `)
    .join('');

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Raldowork browser</title>
      <style>
        body { font-family: sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1 { color: #333; }
        ul { list-style: none; padding: 0; }
        li { margin: 10px 0; padding: 10px; background: #f5f5f5; border-radius: 4px; }
        li a { text-decoration: none; color: #333; display: block; }
        li strong { display: block; font-size: 1.2em; }
        li small { display: block; color: #666; font-size: 0.9em; }
      </style>
    </head>
    <body>
      <h1>Rlnd</h1>
      <ul>${projectLinks}</ul>
    </body>
    </html>
  `;
}

function renderDirectory(projectInfo, files) {
  const fileList = files
    .map(file => `<li><a href="/${encodeURIComponent(projectInfo.rlcd)}/${encodeURIComponent(file)}">${file}</a></li>`)
    .join('');

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${projectInfo.name}</title>
      <style>
        body { font-family: sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1 { color: #333; }
        .domain { color: #666; font-size: 0.9em; margin-bottom: 20px; }
        ul { list-style: none; padding: 0; }
        li { margin: 5px 0; padding: 8px; background: #f5f5f5; border-radius: 4px; }
        li a { text-decoration: none; color: #333; }
        .back-link { display: inline-block; margin-top: 20px; padding: 8px 15px; background: #eee; border-radius: 4px; text-decoration: none; color: #333; }
      </style>
    </head>
    <body>
      <h1>${projectInfo.name}</h1>
      <div class="domain">Dom√≠nio: ${projectInfo.rlcd}</div>
      <ul>${fileList}</ul>
      <a href="/" class="back-link">Back to rlnds</a>
    </body>
    </html>
  `;
}

const server = http.createServer((req, res) => {
  const url = new URL(req.url, `http://${req.headers.host}`);
  const pathParts = url.pathname.split('/').filter(Boolean);

  if (pathParts.length === 0) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    return res.end(renderHTML());
  }

  const projectDomain = decodeURIComponent(pathParts[0]);
  const filePath = pathParts.slice(1).join('/');

  if (pathParts.length === 1) {
    const projectInfo = Raldowork.enter(projectDomain);

    if (!projectInfo) {
      res.writeHead(404, {'Content-Type': 'text/html'});
      return res.end(`<h1>404 Not Found</h1><p>Project ${projectDomain} not found</p>`);
    }

    if (projectInfo.structure.includes('index.html')) {
      Raldowork.read(projectDomain, 'index.html', (content) => {
        res.writeHead(200, {'Content-Type': 'text/html'});
        res.end(content);
      });
    } else {
      res.writeHead(200, {'Content-Type': 'text/html'});
      res.end(renderDirectory({
        name: projectInfo.name,
        rlcd: projectDomain
      }, projectInfo.structure || []));
    }
    return;
  }

  Raldowork.read(projectDomain, filePath, (content) => {
    if (content === null) {
      res.writeHead(404, {'Content-Type': 'text/html'});
      return res.end(`
        <h1>404 Not Found</h1>
        <p>${filePath} not found in ${projectDomain}</p>
        <a href="/${encodeURIComponent(projectDomain)}/">Back to project</a>
      `);
    }

    const contentType = getContentType(filePath);
    res.writeHead(200, {'Content-Type': contentType});
    res.end(content);
  });
});

server.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
});
