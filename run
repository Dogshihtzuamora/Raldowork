const http = require('http');
const path = require('path');
const os = require('os');
const fs = require('fs');
const Raldowork = require('./raldowork');

const PORT = 3131;

const CONTENT_TYPES = {
  '.html': 'text/html',
  '.css': 'text/css',
  '.js': 'application/javascript',
  '.json': 'application/json',
  '.png': 'image/png',
  '.jpg': 'image/jpeg',
  '.jpeg': 'image/jpeg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.ico': 'image/x-icon',
  '.txt': 'text/plain',
  '.md': 'text/markdown'
};

function getContentType(filePath) {
  const ext = path.extname(filePath).toLowerCase();
  return CONTENT_TYPES[ext] || 'application/octet-stream';
}

function getLocalIP() {
  const nets = os.networkInterfaces();
  for (const name of Object.keys(nets)) {
    for (const net of nets[name]) {
      if (net.family === 'IPv4' && !net.internal) {
        return net.address;
      }
    }
  }
  return 'localhost';
}

function renderHTML() {
  const projects = Raldowork.list();
  const projectLinks = projects
    .map(project => `
      <li>
        <a href="/${encodeURIComponent(project.rlcd)}/">
          <strong>${project.name}</strong>
          <small>${project.rlcd}</small>
        </a>
      </li>
    `)
    .join('');

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Raldowork browser</title>
      <link rel="stylesheet" href="/pattern.css">
    </head>
    <body>
      <h1>Rlnd</h1>
      <ul>${projectLinks}</ul>
    </body>
    </html>
  `;
}

function renderDirectory(projectInfo, files) {
  const fileList = files
    .map(file => `<li><a href="/${encodeURIComponent(projectInfo.rlcd)}/${encodeURIComponent(file)}">${file}</a></li>`)
    .join('');

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${projectInfo.name}</title>
      <link rel="stylesheet" href="/pattern.css">
    </head>
    <body>
      <h1>${projectInfo.name}</h1>
      <div class="domain">Domínio: ${projectInfo.rlcd}</div>
      <ul>${fileList}</ul>
      <a href="/" class="back-link">Back to rlnds</a>
    </body>
    </html>
  `;
}

const server = http.createServer((req, res) => {
  const url = new URL(req.url, `http://${req.headers.host}`);
  const pathParts = url.pathname.split('/').filter(Boolean);

  if (url.pathname === '/pattern.css') {
    const cssPath = path.join(__dirname, 'pattern.css');
    fs.readFile(cssPath, (err, data) => {
      if (err) {
        res.writeHead(404);
        return res.end('Not found');
      }
      res.writeHead(200, { 'Content-Type': 'text/css' });
      res.end(data);
    });
    return;
  }

  if (pathParts.length === 0) {
    res.writeHead(200, { 'Content-Type': 'text/html' });
    return res.end(renderHTML());
  }

  const projectDomain = decodeURIComponent(pathParts[0]);
  const filePath = pathParts.slice(1).join('/');

  if (pathParts.length === 1) {
    const projectInfo = Raldowork.enter(projectDomain);

    if (!projectInfo) {
      res.writeHead(404, { 'Content-Type': 'text/html' });
      return res.end(`<h1>404 Not Found</h1><p>Project ${projectDomain} not found</p>`);
    }

    if (projectInfo.structure.includes('index.html')) {
      Raldowork.read(projectDomain, 'index.html', (content) => {
        res.writeHead(200, { 'Content-Type': 'text/html' });
        res.end(content);
      });
    } else {
      res.writeHead(200, { 'Content-Type': 'text/html' });
      res.end(renderDirectory({
        name: projectInfo.name,
        rlcd: projectDomain
      }, projectInfo.structure || []));
    }
    return;
  }

  Raldowork.read(projectDomain, filePath, (content) => {
    if (content === null) {
      res.writeHead(404, { 'Content-Type': 'text/html' });
      return res.end(`
        <h1>404 Not Found</h1>
        <p>${filePath} not found in ${projectDomain}</p>
        <a href="/${encodeURIComponent(projectDomain)}/">Back to project</a>
      `);
    }

    const contentType = getContentType(filePath);
    res.writeHead(200, { 'Content-Type': contentType });
    res.end(content);
  });
});

const localIP = getLocalIP();
server.listen(PORT, '0.0.0.0', () => {
  console.log(`\nServer running at:
  - http://localhost:${PORT}
  - http://${localIP}:${PORT} (acessível via celular na mesma rede)\n`);
});
